package com.v3l7.eece411.A2;
import java.io.*;
import java.rmi.*;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.RMISecurityManager;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.util.TimerTask;
import java.util.Timer;

public class ClientBootstrap
{    
    private static GUI gui;
    private static MessageQueue _queue;
	
	private static final int KEEP_ALIVE_RATE = 5000;
    
    public static void main(String[] args)
	{
        //Get the chatroom name and client name command line arguments
		if (args.length != 3)
		{
			System.out.println("USAGE: Client " + "<hostname> <chatroomName> <clientName>");
			System.exit(0);
		}
		String hostname = (args.length == 3) ? args[0] : "Rocky-PC";//"dhcp-128-189-216-231.ubcsecure.wireless.ubc.ca";
		String chatroomName = (args.length == 3) ? args[1] : "ChatServer";
		String clientName = (args.length == 3) ? args[2] : "Unknown Client";
		
		// create a shared buffer where the GUI add the messages thet need to 
        // be sent out by the main thread.  The main thread stays in a loop 
        // and when a new message shows up in the buffer it sends it out 
        // to the chat server (using RMI)
        _queue = new MessageQueue();
        
        // instantiate the GUI - in a new thread
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                gui = GUI.createAndShowGUI(_queue);  
            }
        });        
        
        // hack make sure the GUI instantioation is completed by the GUI thread 
        // before the next call
        while (gui == null)
            Thread.currentThread().yield();       
        
        // The code below serves as an example to show how the shares message 
        // between the GUI and the main thread.
        // You will probably want to replace the code below with code that sits in a loop,  
        // waits for new messages to be entered by the user, and sends them to the 
        // chat server (using an RMI call)
        // 
        // In addition you may want to add code that
        //   * connects to the chat server and provides an object for callbacks (so 
        //     that the server has a way to send messages generated by other users)
        //   * implement the callback object which is called by the server remotely 
        //     and, in turn, updates the local GUI

        // I download server's stubs ==> must set a SecurityManager 
        System.setSecurityManager(new RMISecurityManager());

		Chat chatStub = null;
		
		//Lookup the chat server, create a callback obj and try registering the client to it
        try {
			//Look for the stub in the rmi registry with the specified chatroom name 
            chatStub = (Chat) Naming.lookup( "//" + hostname + "/" + chatroomName);
			
			//If register returns false, then there was a client name conflict
			//So exit the client and inform user to use a new client name
			//Assume if register throws a ConnectException that server is down
		    if (!chatStub.register(clientName, new CallbackImpl(gui)))
			{
				System.out.println("Error: A client already exists with the id " + clientName + "!\n");
				System.out.println("Please try again with a different id.");
				System.exit(0);
			}
			
			//Instantiate a new PingServer and schedule it to run periodically
			PingServer pingTask = new PingServer(chatStub, clientName);
			Timer t = new Timer();
			t.scheduleAtFixedRate(pingTask, 0, KEEP_ALIVE_RATE);
        
			while (true)
			{
				String s;
				try {
					//Wait until the user enters a new chat message
					s = _queue.dequeue();
				} catch (InterruptedException ie) {
					break;
				}
				
				//Print it to System.out (or send it to the RMI server)
				System.out.println ("User entered: " + s + " -- now sending it to chat server");
				
				//Broadcast the message entered by the user
				//Prefix the message with client id and then broadcast
				String message = clientName + ":> " + s;
				sendMessage(chatStub, message);
			}
        } catch (ConnectException e) {
			System.out.println("Error: Can't connect to server.\n");
			System.out.println("Please try again later.");
			System.exit(0);
		} catch (Exception e) {
			System.out.println("Client exception: " + e.getMessage());
			e.printStackTrace();
        }
    }
	
	private static void sendMessage(Chat chatStub, String message)
	{
		//Try up to 3 times. If the a ConnectException occurs, assume server is down and terminate the client
		for (int i=0; i < 3; i++)
		{
			try {				
				chatStub.broadcast(message);
				//Quit trying if we succeed (i.e. no exception)
				break;
			} catch (ConnectException e) {
				if (i < 2)
				{
					System.out.println("Attempt " + (i+1) + ": Failed to broadcast message to server. Trying again...");
				}
				else
				{
					System.out.println("Attempt " + (i+1) + ": Unable to connect to server. Terminating client!");
					gui.addToTextArea("Unable to connect to server. Terminating client!");
					System.exit(0);
				}
			} catch (Exception e) {
				System.out.println("Client exception: " + e.getMessage());
				e.printStackTrace();
			}
		}
	}
	
	//Nested timer class to ping server to inform it that client is alive
	//See reference here: http://stackoverflow.com/questions/4985343/java-rmi-timeouts-crashes
	private static class PingServer extends TimerTask
	{
		private Chat server;
		private String clientId;
		
		public PingServer(Chat chatStub, String clientName)
		{
			server = chatStub;
			clientId = clientName;
		}
	
		public void run()
		{
			System.out.println("Running PingServer...");
			//Send keepAlive to server up to 3 times.
			//If keepAlive method fails after 3 tries, assume server is down and terminate the client
			for (int i=0; i < 3; i++)
			{
				try {
					server.keepAlive(clientId);
					//Quit trying if we succeed (i.e. no exception)
					break;
				} catch (ConnectException e) {
					if (i < 2)
					{
						System.out.println("Attempt " + (i+1) + ": Failed to invoke keepAlive. Trying again...");
					}
					else
					{
						System.out.println("Attempt " + (i+1) + ": Unable to connect to server. Terminating client!");
						gui.addToTextArea("Unable to connect to server. Terminating client!");
						System.exit(0);
					}
				} catch (Exception e) {
					System.out.println("Client exception: " + e.getMessage());
					e.printStackTrace();
				}
			}
		}
	}
}
